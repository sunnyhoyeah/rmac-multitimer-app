name: iOS Device Testing & Distribution

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      distribution_type:
        description: 'Distribution type'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - adhoc
          - development
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  FLUTTER_VERSION: '3.24.0'
  XCODE_VERSION: '15.0'

jobs:
  test-and-build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: |
        flutter pub get
        cd ios && pod install --repo-update

    - name: Import Code-Signing Certificates
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
        p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}

    - name: Download Apple Provisioning Profiles
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      uses: Apple-Actions/download-provisioning-profiles@v1
      with:
        bundle-id: 'com.rmac.multitimer'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

    - name: Auto-bump version (on main branch push)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Get current version and increment
        CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        CURRENT_BUILD=$(grep '^version:' pubspec.yaml | cut -d'+' -f2)
        NEW_BUILD=$((CURRENT_BUILD + 1))
        
        sed -i '' "s/^version:.*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "NEW_BUILD=$NEW_BUILD" >> $GITHUB_ENV

    - name: Manual version bump (on workflow dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.version_bump }}" in
          "major") NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          "minor") NEW_VERSION="$MAJOR.$((MINOR + 1)).0" ;;
          "patch") NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))" ;;
        esac
        
        CURRENT_BUILD=$(grep '^version:' pubspec.yaml | cut -d'+' -f2)
        NEW_BUILD=$((CURRENT_BUILD + 1))
        
        sed -i '' "s/^version:.*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "NEW_BUILD=$NEW_BUILD" >> $GITHUB_ENV

    - name: Build iOS App for Testing (Development)
      run: |
        flutter build ios --release --no-codesign
        
        # Archive the app
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/ios/Runner.xcarchive \
          archive

    - name: Export IPA for Development Distribution
      if: github.event.inputs.distribution_type == 'development' || github.ref != 'refs/heads/main'
      run: |
        cat > ios/ExportOptions-Development.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>development</string>
          <key>teamID</key>
          <string>\${{ secrets.APPLE_TEAM_ID }}</string>
          <key>compileBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportOptionsPlist ios/ExportOptions-Development.plist \
          -exportPath build/ios/development

    - name: Export IPA for TestFlight Distribution
      if: github.event.inputs.distribution_type == 'testflight' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      run: |
        cat > ios/ExportOptions-TestFlight.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>\${{ secrets.APPLE_TEAM_ID }}</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportOptionsPlist ios/ExportOptions-TestFlight.plist \
          -exportPath build/ios/testflight

    - name: Upload to TestFlight
      if: github.event.inputs.distribution_type == 'testflight' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: 'build/ios/testflight/RMAC MultiTimer.ipa'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

    - name: Install to Connected iPhone (Development builds only)
      if: github.event.inputs.distribution_type == 'development'
      run: |
        # Install ios-deploy for device installation
        npm install -g ios-deploy
        
        # List connected devices
        echo "📱 Scanning for connected iOS devices..."
        ios-deploy --detect || echo "No devices connected"
        
        # Install app to connected device if available
        if ios-deploy --detect | grep -q "Found"; then
          echo "📲 Installing to connected iPhone..."
          ios-deploy --bundle build/ios/development/Runner.app --debug --no-wifi
        else
          echo "⚠️  No iPhone connected via USB"
        fi

    - name: Generate Device Installation QR Code
      if: github.event.inputs.distribution_type == 'development'
      run: |
        # Create a simple installation page
        mkdir -p device-install
        cat > device-install/index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>RMAC MultiTimer - Device Install</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
                .qr-code { margin: 20px auto; }
                .install-button { 
                    background: #007AFF; color: white; padding: 15px 30px; 
                    border: none; border-radius: 8px; font-size: 18px; 
                    text-decoration: none; display: inline-block; margin: 10px;
                }
            </style>
        </head>
        <body>
            <h1>RMAC MultiTimer v${{ env.NEW_VERSION || 'dev' }}</h1>
            <p>Install on your iPhone</p>
            <a href="itms-services://?action=download-manifest&url=https://github.com/sunnyhoyeah/rmac-multitimer-app/releases/download/v${{ env.NEW_VERSION || 'latest' }}/manifest.plist" class="install-button">
                📱 Install on iPhone
            </a>
            <p><small>Make sure you're connected to the same WiFi network</small></p>
        </body>
        </html>
        EOF

    - name: Commit version bump
      if: github.ref == 'refs/heads/main' && (env.NEW_VERSION != '')
      run: |
        git add pubspec.yaml
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }}+${{ env.NEW_BUILD }}" || exit 0
        git push origin main

    - name: Upload Development IPA
      if: github.event.inputs.distribution_type == 'development'
      uses: actions/upload-artifact@v4
      with:
        name: ios-development-v${{ env.NEW_VERSION || 'dev' }}
        path: |
          build/ios/development/
          device-install/

    - name: Upload TestFlight IPA
      if: github.event.inputs.distribution_type == 'testflight' || github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: ios-testflight-v${{ env.NEW_VERSION || 'dev' }}
        path: build/ios/testflight/

  # Device testing job
  ios-device-tests:
    runs-on: macos-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[device-test]')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Install dependencies
      run: |
        flutter pub get
        npm install -g ios-deploy

    - name: Run Unit Tests
      run: flutter test

    - name: Build for iOS Device Testing
      run: flutter build ios --debug --no-codesign

    - name: Check for Connected Devices
      run: |
        echo "📱 Checking for connected iOS devices..."
        ios-deploy --detect || echo "No physical devices connected"
        
        # Run integration tests on simulator
        echo "🧪 Running integration tests on iOS Simulator..."
        flutter test integration_test/ --device-id="iPhone" || echo "No integration tests found"
