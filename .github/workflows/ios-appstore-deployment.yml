name: iOS App Store Deployment

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.0.0-beta, etc.
    branches:
      - main  # Also trigger on main branch pushes for TestFlight
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - appstore
          - appstore-no-precheck
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Automated release'
      create_github_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  determine-deployment:
    runs-on: ubuntu-latest
    outputs:
      deployment_type: ${{ steps.determine.outputs.deployment_type }}
      release_notes: ${{ steps.determine.outputs.release_notes }}
      is_prerelease: ${{ steps.determine.outputs.is_prerelease }}
      version_tag: ${{ steps.determine.outputs.version_tag }}
    
    steps:
    - name: Determine deployment type
      id: determine
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "deployment_type=${{ github.event.inputs.deployment_type }}" >> $GITHUB_OUTPUT
          echo "release_notes=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "version_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME="${{ github.ref_name }}"
          echo "version_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$TAG_NAME" =~ -beta|-alpha|-rc ]]; then
            echo "deployment_type=testflight" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_notes=Beta release $TAG_NAME - automated deployment" >> $GITHUB_OUTPUT
          else
            echo "deployment_type=appstore-no-precheck" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_notes=Production release $TAG_NAME - automated deployment" >> $GITHUB_OUTPUT
          fi
        else
          # Main branch push -> TestFlight
          echo "deployment_type=testflight" >> $GITHUB_OUTPUT
          echo "release_notes=Development build from main branch" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_tag=main-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

  deploy-ios:
    runs-on: macos-latest
    needs: determine-deployment
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag or pubspec.yaml
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=main-build" >> $GITHUB_OUTPUT
        fi

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Setup Ruby for Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false
        working-directory: ios
    
    - name: Install Ruby dependencies
      run: |
        echo "Current directory: $(pwd)"
        cd ios
        echo "Working directory after cd: $(pwd)"
        echo "Files in directory:"
        ls -la
        gem install bundler
        bundle install --retry=3 --jobs=4

    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          **/.flutter-plugins
          **/.flutter-plugin-dependencies
          **/GeneratedPluginRegistrant.swift
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}

    - name: Install Flutter dependencies
      run: flutter pub get

    - name: Setup environment variables
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      run: |
        echo "Creating environment file..."
        mkdir -p ~/.config
        cat > ~/.appstore_connect_env << EOF
        export FASTLANE_USER="${{ secrets.FASTLANE_USER }}"
        export FASTLANE_PASSWORD="${{ secrets.FASTLANE_PASSWORD }}"
        export APP_STORE_CONNECT_API_KEY_ID="${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}"
        export APP_STORE_CONNECT_ISSUER_ID="${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
        export APP_STORE_CONNECT_API_KEY="${{ secrets.APP_STORE_CONNECT_API_KEY }}"
        EOF
        source ~/.appstore_connect_env

    - name: Setup iOS certificates and provisioning profiles
      run: |
        cd ios
        
        # Debug: Check current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Checking for Gemfile:"
        ls -la Gemfile* || echo "No Gemfile found"
        echo "Checking bundle status:"
        bundle --version
        
        # Source environment variables
        source ~/.appstore_connect_env
        
        # Create API key file
        echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        
        # Install certificates and provisioning profiles (optional)
        bundle exec fastlane setup || echo "Certificate setup failed, using manual certificates"

    - name: Build and deploy iOS app
      run: |
        cd ios
        
        # Debug: Check current directory and bundle status
        echo "Current directory: $(pwd)"
        echo "Bundle status:"
        bundle --version
        bundle list || echo "Bundle list failed"
        
        # Source environment variables
        source ~/.appstore_connect_env
        
        # Determine deployment type
        DEPLOYMENT_TYPE="${{ needs.determine-deployment.outputs.deployment_type }}"
        RELEASE_NOTES="${{ needs.determine-deployment.outputs.release_notes }}"
        
        echo "üöÄ Deploying with type: $DEPLOYMENT_TYPE"
        echo "üìù Release notes: $RELEASE_NOTES"
        
        case "$DEPLOYMENT_TYPE" in
          "testflight")
            bundle exec fastlane deploy_testflight changelog:"$RELEASE_NOTES"
            ;;
          "appstore")
            bundle exec fastlane deploy_appstore release_notes:"$RELEASE_NOTES"
            ;;
          "appstore-no-precheck")
            bundle exec fastlane deploy_appstore_no_precheck release_notes:"$RELEASE_NOTES"
            ;;
          *)
            echo "Unknown deployment type: $DEPLOYMENT_TYPE"
            exit 1
            ;;
        esac

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-ipa-${{ needs.determine-deployment.outputs.version_tag }}-${{ github.run_number }}
        path: ios/build/Runner.ipa
        retention-days: 30

    - name: Create GitHub Release
      if: |
        github.ref_type == 'tag' && 
        (github.event.inputs.create_github_release == 'true' || github.event_name != 'workflow_dispatch')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: "RMAC MultiTimer ${{ steps.version.outputs.tag_name }}"
        body: |
          ## üöÄ Release ${{ steps.version.outputs.tag_name }}
          
          **Deployment Type**: ${{ needs.determine-deployment.outputs.deployment_type }}
          **Release Notes**: ${{ needs.determine-deployment.outputs.release_notes }}
          
          ### üì± iOS App
          - ‚úÖ Built and uploaded to ${{ needs.determine-deployment.outputs.deployment_type == 'testflight' && 'TestFlight' || 'App Store Connect' }}
          - üì¶ Build artifacts available in this release
          
          ### üîß Changes
          See commit history for detailed changes.
          
          ---
          *This release was automatically created by GitHub Actions*
        draft: false
        prerelease: ${{ needs.determine-deployment.outputs.is_prerelease }}

    - name: Upload IPA to GitHub Release
      if: |
        github.ref_type == 'tag' && 
        (github.event.inputs.create_github_release == 'true' || github.event_name != 'workflow_dispatch')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ios/build/Runner.ipa
        asset_name: RMAC-MultiTimer-${{ steps.version.outputs.version }}.ipa
        asset_content_type: application/octet-stream

    - name: Notify deployment status
      if: always()
      run: |
        DEPLOYMENT_TYPE="${{ needs.determine-deployment.outputs.deployment_type }}"
        VERSION_TAG="${{ needs.determine-deployment.outputs.version_tag }}"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ iOS deployment completed successfully!"
          echo "üöÄ Version: $VERSION_TAG"
          echo "üì± Deployed to: $DEPLOYMENT_TYPE"
          
          case "$DEPLOYMENT_TYPE" in
            "testflight")
              echo "üß™ Check TestFlight for the new build"
              echo "üí° TestFlight URL: https://appstoreconnect.apple.com/apps/${{ secrets.APP_STORE_APP_ID }}/testflight/ios"
              ;;
            "appstore"|"appstore-no-precheck")
              echo "üè™ Check App Store Connect for review status"
              echo "üí° App Store Connect URL: https://appstoreconnect.apple.com/apps/${{ secrets.APP_STORE_APP_ID }}/appstore/ios/version/deliverable"
              ;;
          esac
        else
          echo "‚ùå iOS deployment failed!"
          echo "üí° Check the logs above for error details"
          echo "üîß Common issues:"
          echo "   - Certificate/provisioning profile problems"
          echo "   - API key configuration"
          echo "   - Build number conflicts"
        fi
